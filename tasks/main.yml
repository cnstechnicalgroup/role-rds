---
- name: Normalize variables
  set_fact:
    prefix: "{{ instance.prefix }}"
    app: "{{ instance.app }}"
    mode: "{{ instance.mode }}"
    instance_name: "{{ instance.prefix }}-{{ instance.app }}-{{ instance.mode }}-{{ instance.version }}"
    db_name: "{{ instance.db_name }}"
    username: "{{ instance.db_username }}"
    password: "{{ instance.db_password }}"
    multizone: "{{ instance.multizone }}"
    region: "{{ instance.region }}"
    db_subnet_group: "mysql_{{ instance.prefix }}_{{ instance.mode}}_dbsng"
    instance_type: "{{ instance.instance_type }}"
    count: "{{ instance.count }}"

- name: Get app subnet address
  set_fact:
    app_cidr: "{{ item.cidr }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ mode }}_app"

- name: Get web subnet address
  set_fact:
    web_cidr: "{{ item.cidr }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ mode }}_web"

- name: Get DB Hosts SG details
  local_action:
    module: ec2_group
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ prefix }}_{{ mode }}_db"
    description: DB Hosts SG
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ mgmt_cidr }}"
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: "{{ mgmt_cidr }}"
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: "{{ app_cidr }}"
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: "{{ web_cidr }}"
  register: db_sg_prod
  when: mode == 'prod'

- name: Get CNS Dev DB Hosts SG details
  local_action:
    module: ec2_group
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ dev_db_sg }}"
    description: DB Hosts SG
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ region }}"
    purge_rules: false
    purge_rules_egress: false   
  register: db_sg_dev
  when: mode == 'dev'

- name: Get RDS - A subnet id for RDS Subnet Group creation
  set_fact:
    rds_subnet_id_a: "{{ item.id }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ mode }}_rdsa"

- name: Get RDS - B subnet id for DB Subnet Group creation
  set_fact:
    rds_subnet_id_b: "{{ item.id }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ mode }}_rdsb"

- name: Get RDS - C subnet id for DB Subnet Group creation
  set_fact:
    rds_subnet_id_c: "{{ item.id }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ mode }}_rdsc"

- name: Create DB Subnet Group
  local_action:
    module: rds_subnet_group
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: present
    region: "{{ region }}"
    name: "{{ db_subnet_group }}"
    description: DB Subnet Group
    subnets:
      - "{{ rds_subnet_id_a }}"
      - "{{ rds_subnet_id_b }}"
      - "{{ rds_subnet_id_c }}"

- name: Initialize RDS instance
  local_action:
    module: rds
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    command: create
    instance_name: "db-{{ instance_name }}"
    backup_retention: 5
    db_engine: "MySQL"
    db_name: "{{ db_name }}"
    username: "{{ username }}"
    password: "{{ password }}"
    multi_zone: "{{ multizone }}"
    size: 5
    region: "{{ region }}"
    subnet: "{{ db_subnet_group }}"
    vpc_security_groups: "{{ db_sg_prod.group_id if db_sg_prod.group_id is defined else db_sg_dev.group_id }}"
    instance_type: "{{ instance_type }}"
  register: rds
  when: no_create_db is not defined
